<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Peter Mackay</title><link>https://petmac.dev/</link><description>Recent content on Peter Mackay</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Mon, 23 Dec 2024 22:36:59 +0000</lastBuildDate><atom:link href="https://petmac.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>PC Engine tile-based quantisation, part 2</title><link>https://petmac.dev/posts/pce-quant-2/</link><pubDate>Mon, 23 Dec 2024 22:36:59 +0000</pubDate><guid>https://petmac.dev/posts/pce-quant-2/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>While exploring &lt;a href="../pce-quant/">PC Engine image quality and quantisation&lt;/a>, I found that when loading an image from CD-ROM to VRAM, it took something like 6 seconds for the load to finish.&lt;/p>
&lt;p>I thought this was a hardware limitation at the time, and supposed that this was the reason that PC Engine games from back in the day didn&amp;rsquo;t feature more colourful background graphics.&lt;/p>
&lt;h2 id="an-unexpected-correction">An unexpected correction&lt;/h2>
&lt;p>I was very grateful when prolific PC Engine developer &lt;strong>Elmer&lt;/strong> corrected me:&lt;/p></description></item><item><title>PC Engine tile-based quantisation, part 1</title><link>https://petmac.dev/posts/pce-quant/</link><pubDate>Mon, 03 Jun 2024 22:20:39 +0100</pubDate><guid>https://petmac.dev/posts/pce-quant/</guid><description>&lt;h2 id="update-24-dec-2024">Update, 24 Dec 2024&lt;/h2>
&lt;p>Check out &lt;a href="../pce-quant-2/">Part 2&lt;/a>, where loading times get much improved!&lt;/p>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>I spend some time in the evenings working on various toy projects. It&amp;rsquo;s a good way to exercise a programmer brain in a way that a day job generally doesn&amp;rsquo;t.&lt;/p>
&lt;p>Anyway, a while back I bought an &lt;a href="https://www.analogue.co/duo">Analogue Duo&lt;/a>, which is a high quality FPGA clone of the old 8/16-bit &lt;a href="https://en.wikipedia.org/wiki/TurboGrafx-16">PC Engine&lt;/a> console.&lt;/p>
&lt;p>I say 8/16 rather than just 16-bit, because while the GPU was 16-bit, the CPU was an 8-bit &lt;a href="https://en.wikipedia.org/wiki/Hudson_Soft_HuC6280">HuC6280&lt;/a> &amp;ndash; a derivative of the legendary 6502 CPU, with a bunch of handy extra instructions and so on. Oh, and 4 times the typical speed.&lt;/p></description></item><item><title>Object Equality</title><link>https://petmac.dev/posts/object-equality/</link><pubDate>Fri, 01 Apr 2022 15:26:29 +0000</pubDate><guid>https://petmac.dev/posts/object-equality/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>One of the first code smells we encounter when working with an object-oriented language where everything is an &lt;em>object&lt;/em>, or everything subclasses a common base class, or there are no static methods, is how OOP typically handles equality of objects.&lt;/p>
&lt;p>For value types such as integers and floating point numbers, it&amp;rsquo;s not controversial that we should be able to compare them and decide if they&amp;rsquo;re equal or not. Integers can be compared by bits, and data structures can be compared by descending into the structure and comparing elements.&lt;/p></description></item><item><title>Removing Reference Cycles</title><link>https://petmac.dev/posts/removing-ref-cycles/</link><pubDate>Thu, 17 Mar 2022 23:47:10 +0000</pubDate><guid>https://petmac.dev/posts/removing-ref-cycles/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>If you are gainfully employed as a programmer, you have probably been forced to accept object-oriented programming into your life. When working with a language like Swift or C++ which doesn&amp;rsquo;t have garbage collection, you will end up in the debugger, trying to locate a strong reference cycle which has resulted in a memory leak.&lt;/p>
&lt;p>Or, you&amp;rsquo;re reviewing a Pull Request and notice that there is a cyclic relationship between some classes.&lt;/p></description></item><item><title>Strong and Weak Object References</title><link>https://petmac.dev/posts/strong-and-weak-object-refs/</link><pubDate>Thu, 17 Mar 2022 23:46:18 +0000</pubDate><guid>https://petmac.dev/posts/strong-and-weak-object-refs/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>An object maintains a reference/pointer to another object so it can call a method or access a property. References are called &lt;em>strong&lt;/em> if the relationship between the objects is one of ownership, and &lt;em>weak&lt;/em> or &lt;em>unowned&lt;/em> if it the object containing the reference does not own the object being referred to.&lt;/p>
&lt;p>In languages like Swift, Objective-C, and C++, it’s required that we don’t create &lt;em>cycles&lt;/em> of strong references, or we get memory leaks.&lt;/p></description></item><item><title>The SOLID Principles</title><link>https://petmac.dev/posts/solid/</link><pubDate>Thu, 17 Mar 2022 23:45:28 +0000</pubDate><guid>https://petmac.dev/posts/solid/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In order to guide programmers to effectively apply object-oriented design, the industry settled on what we call &lt;a href="https://en.wikipedia.org/wiki/SOLID">the SOLID principles&lt;/a>.&lt;/p>
&lt;p>I believe that while the SOLID principles were marketed to encourage “good” use of OOP, they just as effectively &lt;em>discourage&lt;/em> the use of OOP!&lt;/p>
&lt;h2 id="the-principles">The principles&lt;/h2>
&lt;h3 id="single-responsibility-principle">Single responsibility principle&lt;/h3>
&lt;blockquote>
&lt;p>every module, class or function in a computer program should have responsibility over a single part of that program&amp;rsquo;s functionality, and it should encapsulate that part.&lt;/p></description></item><item><title>Object-oriented Programming (OOP)</title><link>https://petmac.dev/posts/oop/</link><pubDate>Thu, 17 Mar 2022 16:58:12 +0000</pubDate><guid>https://petmac.dev/posts/oop/</guid><description>&lt;h2 id="what-is-oop">What is OOP?&lt;/h2>
&lt;p>First, read &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming">Wikipedia&lt;/a>.&lt;/p>
&lt;h2 id="characteristics-of-oop">Characteristics of OOP&lt;/h2>
&lt;h3 id="division-of-the-problem-into-objects-which-implement-classes">Division of the problem into Objects which implement Classes&lt;/h3>
&lt;p>The programmer is able to model the problem space in terms of objects that talk to each other via messages (method calls.)&lt;/p>
&lt;p>I believe this to be a poor approach to most data transformation problems.&lt;/p>
&lt;h4 id="noun-ification">Noun-ification&lt;/h4>
&lt;p>To encapsulate with OOP, you have to invent &lt;em>names&lt;/em> (nouns) for the classes which encapsulate the &lt;em>functionality&lt;/em> (verbs). In many cases this is quite difficult, and you end up with names that don&amp;rsquo;t succinctly but completely summarise the functionality being encapsulated.&lt;/p></description></item><item><title>What is Programming?</title><link>https://petmac.dev/posts/what-is-programming/</link><pubDate>Thu, 17 Mar 2022 16:22:11 +0000</pubDate><guid>https://petmac.dev/posts/what-is-programming/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This page borrows heavily from &lt;a href="https://twitter.com/mike_acton">Mike Acton&lt;/a>.&lt;/p>
&lt;h2 id="transformation-of-data">Transformation of data&lt;/h2>
&lt;p>Writing code is a means to solving a problem, and primarily the problem is that some data (input) needs to be transformed into something else (output).&lt;/p>
&lt;p>Examples of inputs:&lt;/p>
&lt;ul>
&lt;li>Button taps&lt;/li>
&lt;li>Incoming HTTP responses&lt;/li>
&lt;li>Events coming from the OS&lt;/li>
&lt;li>Events coming from 3rd party SDKs&lt;/li>
&lt;/ul>
&lt;p>Examples of outputs:&lt;/p>
&lt;ul>
&lt;li>The view hierarchy&lt;/li>
&lt;li>Audio&lt;/li>
&lt;li>HTTP requests&lt;/li>
&lt;li>Requests sent to 3rd party SDKs&lt;/li>
&lt;/ul>
&lt;p>Frequently the output is not only dependent on any particular input, but on some stored state that is maintained as the app runs. Examples of stores:&lt;/p></description></item></channel></rss>