<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>How to Code on Peter Mackay</title><link>https://petmac.dev/how-to-code/</link><description>Recent content in How to Code on Peter Mackay</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 17 Mar 2022 23:04:52 +0000</lastBuildDate><atom:link href="https://petmac.dev/how-to-code/index.xml" rel="self" type="application/rss+xml"/><item><title>Removing Reference Cycles</title><link>https://petmac.dev/how-to-code/removing-ref-cycles/</link><pubDate>Thu, 17 Mar 2022 23:47:10 +0000</pubDate><guid>https://petmac.dev/how-to-code/removing-ref-cycles/</guid><description>Context If you are gainfully employed as a programmer, you have probably been forced to accept object-oriented programming into your life. When working with a language like Swift or C++ which doesn&amp;rsquo;t have garbage collection, you will end up in the debugger, trying to locate a strong reference cycle which has resulted in a memory leak.
Or, you&amp;rsquo;re reviewing a Pull Request and notice that there is a cyclic relationship between some classes.</description></item><item><title>Strong and Weak Object References</title><link>https://petmac.dev/how-to-code/strong-and-weak-object-refs/</link><pubDate>Thu, 17 Mar 2022 23:46:18 +0000</pubDate><guid>https://petmac.dev/how-to-code/strong-and-weak-object-refs/</guid><description>Introduction An object maintains a reference/pointer to another object so it can call a method or access a property. References are called strong if the relationship between the objects is one of ownership, and weak or unowned if it the object containing the reference does not own the object being referred to.
In languages like Swift, Objective-C, and C++, it’s required that we don’t create cycles of strong references, or we get memory leaks.</description></item><item><title>The SOLID Principles</title><link>https://petmac.dev/how-to-code/solid/</link><pubDate>Thu, 17 Mar 2022 23:45:28 +0000</pubDate><guid>https://petmac.dev/how-to-code/solid/</guid><description>Introduction In order to guide programmers to effectively apply object-oriented design, the industry settled on what we call the SOLID principles.
I believe that while the SOLID principles were marketed to encourage “good” use of OOP, they just as effectively discourage the use of OOP!
The principles Single responsibility principle every module, class or function in a computer program should have responsibility over a single part of that program&amp;rsquo;s functionality, and it should encapsulate that part.</description></item><item><title>Object-oriented Programming (OOP)</title><link>https://petmac.dev/how-to-code/oop/</link><pubDate>Thu, 17 Mar 2022 16:58:12 +0000</pubDate><guid>https://petmac.dev/how-to-code/oop/</guid><description>What is OOP? First, read Wikipedia.
Characteristics of OOP Division of the problem into Objects which implement Classes The programmer is able to model the problem space in terms of objects that talk to each other via messages (method calls.)
I believe this to be a poor approach to most data transformation problems.
Noun-ification To encapsulate with OOP, you have to invent names (nouns) for the classes which encapsulate the functionality (verbs).</description></item><item><title>What is Programming?</title><link>https://petmac.dev/how-to-code/what-is-programming/</link><pubDate>Thu, 17 Mar 2022 16:22:11 +0000</pubDate><guid>https://petmac.dev/how-to-code/what-is-programming/</guid><description>Introduction This page borrows heavily from Mike Acton.
Transformation of data Writing code is a means to solving a problem, and primarily the problem is that some data (input) needs to be transformed into something else (output).
Examples of inputs:
Button taps Incoming HTTP responses Events coming from the OS Events coming from 3rd party SDKs Examples of outputs:
The view hierarchy Audio HTTP requests Requests sent to 3rd party SDKs Frequently the output is not only dependent on any particular input, but on some stored state that is maintained as the app runs.</description></item></channel></rss>